import React, { useState } from "react";
import {
  TextInput,
  TouchableOpacity,
  Text,
  View,
  StyleSheet,
} from "react-native";
import {
  validPassword,
  passwordLengthValidation,
  emailLengthValidation,
  emailOtherValidation,
} from "../formFunctions/LoginFunction";
import axios from "axios";

const Login = ({ navigation }) => {
  const [userName, setuserEmail] = useState("");
  const [userPassword, setuserPassword] = useState("");
  // const [isEmailLengthValid, setIsEmailLengthValid] = useState(true);
  const [isPasswordLengthValid, setIsPasswordLengthValid] = useState(true);
  const [isPasswordValid, setIsPasswordValid] = useState(true);
  // const [isEmailValid, setIsEmailValid] = useState(true);
//   const [formSubmit, setFormSubmit] = useState(false);
  const [DataStatus, setDataStatus] = useState(false);
  const [count, setCount] = useState(0);


  const formValidate = () => {

    setCount(1);

    // email validation............
    if (emailLengthValidation(userEmail)) {
      setIsEmailLengthValid(true);
      // console.log('kllllllllllll')
      if (emailOtherValidation(userEmail)) setIsEmailValid(true);
      else setIsEmailValid(false);
    } else {
      setIsEmailLengthValid(false);
    }
    // password Validations................
    if (passwordLengthValidation(userPassword)) {
      setIsPasswordLengthValid(true);
      if (validPassword(userPassword)) setIsPasswordValid(true);
      else setIsPasswordValid(false);
    } else {
      setIsPasswordLengthValid(false);
    }
    if (
    isEmailLengthValid &&
    isPasswordLengthValid &&
    isPasswordValid &&
    isEmailValid &&
    count
  ) {
    
 LoginData()
  }
  };

  // console.log(
  //   isEmailLengthValid,
  //   isPasswordLengthValid,
  //   isPasswordValid,
  //   isEmailValid,
  //   count
  // );
  // form submit or not
  

  const LoginData = () => {
    const Url =
      `https://secure-refuge-14993.herokuapp.com/login?username=${userName}&password=${userPassword}`;
    axios
      .post(Url)
      .then(
        (res , error) => {
          console.log(res)
      // navigation.navigate("Output")

          if (res.status >= 200) {
            setDataStatus(true);
          }
        },
        (error) => {
          if (res.status < 200) {
            setDataStatus(false);
          }
        }
      );
  };

  return (
    <View style={styles.FormBody}>
      
      <View>
        <Text
          style={{
            fontSize: 32,
            fontWeight: "bold",
            color: "#1a73e8",
            textAlign: "center",
            marginBottom: 25,
          }}
        >
          Polling App
        </Text>
      </View>
      <TextInput
        placeholder="Email"
        style={styles.formInputs}
        value={userName}
        onChangeText={(e) => {
          setuserEmail(e);
        }}
      />
      {/* {isEmailLengthValid ? null : <Text>field should not empty</Text>}
            {isEmailValid?null:<Text>wrong email</Text>} */}
      {isEmailLengthValid && isEmailValid ? null : (
        <Text>incorrect email pattern</Text>
      )}

      <TextInput
        placeholder="Password"
        style={styles.formInputs}
        value={userPassword}
        onChangeText={(e) => {
          setuserPassword(e);
        }}
      />
      {/* {isPasswordLengthValid ? null : <Text>field should not empty</Text>}
            {isPasswordValid?null:<Text>password should contain numeric as well as alphabets</Text>} */}
      {isPasswordLengthValid && isPasswordValid ? null : (
        <Text>incorrect password pattern</Text>
      )}
      <View style={{ display: "flex", alignItems: "center" }}>
        <TouchableOpacity
          style={styles.submitForm}
          onPress={() => formValidate()}
        >
          <Text style={styles.submitText}>Log In</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.signUpOnLogin}
          onPress={() => navigation.navigate("Register")}
        >
          <Text style={styles.signUpOnLoginText}>
            new user? sign up instead
          </Text>
        </TouchableOpacity>
      </View>
      {DataStatus && <Text>Fail login </Text>}

    </View>
  );
};

const styles = StyleSheet.create({
  FormBody: {
    backgroundColor: "#fff",
    padding: 15,
    width: "100%",
    height: "100%",
  },
  formInputs: {
    borderColor: "#cccccc",
    borderWidth: 2,
    backgroundColor: "#ffffff",
    paddingHorizontal: 15,
    paddingVertical: 5,
    marginTop: 10,
    borderRadius: 5,
  },
  formInputsFalse: {
    borderColor: "red",
    borderWidth: 2,
    backgroundColor: "#ffffff",
    paddingHorizontal: 15,
    paddingVertical: 5,
    marginTop: 10,
    borderRadius: 5,
  },
  submitForm: {
    backgroundColor: "#1a73e8",
    padding: 10,
    marginTop: 30,
    borderRadius: 5,
    width: 120,
    textAlign: "center",
  },
  submitText: {
    fontSize: 20,
    textAlign: "center",
    color: "#ffffff",
  },
  signUpOnLogin: {
    marginTop: 15,
  },
  signUpOnLoginText: {
    fontSize: 15,
    color: "red",
  },
  formTextError: {
    color: "red",
  },
});

export default Login;
